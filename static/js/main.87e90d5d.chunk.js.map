{"version":3,"sources":["Components/InputCity.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["InputCity","props","react_default","a","createElement","onSubmit","showWeather","Input","type","name","value","city","action","placeholder","onChange","handleChange","Weather","cod","Message","error","header","list","Header","as","Flag","flag","location","country","Divider","Label","size","temp","image","src","icon","alt","desc","Table","celled","Body","Row","textAlign","Cell","maxTemp","minTemp","humidity","pressure","wind","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","_ref","setState","defineProperty","preventDefault","target","state","undefined","_this2","fetch","concat","then","response","json","weather","sys","main","toFixed","description","temp_max","temp_min","speed","toLowerCase","componentDidMount","console","log","_this$state","className","Grid","verticalAlign","Column","style","maxWidth","color","Components_InputCity","Components_Weather","href","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87e90d5d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Input } from \"semantic-ui-react\";\n\nconst InputCity = props => (\n  <form onSubmit={props.showWeather}>\n    <Input\n      type=\"text\"\n      name=\"city\"\n      value={props.city}\n      action=\"Show Weather\"\n      placeholder=\"Enter the city...\"\n      onChange={props.handleChange}\n    />\n  </form>\n);\n\nexport default InputCity;\n","import React from \"react\";\nimport {\n  Header,\n  Flag,\n  Label,\n  Divider,\n  Table,\n  Message\n} from \"semantic-ui-react\";\n\nconst Weather = props => {\n  return props.cod !== 200 ? (\n    <Message\n      error\n      header=\"There was some errors with your submission\"\n      list={[\n        \"You must include both a upper and lower case letters in your password.\",\n        \"You need to select your home country.\"\n      ]}\n    />\n  ) : (\n    <div>\n      <Header as=\"h2\">\n        <Flag name={props.flag} />\n        {props.location}, {props.country}\n      </Header>\n      <Divider />\n      <Label size=\"big\">{props.temp} ° C</Label>\n      <Label image size=\"big\">\n        <img src={props.icon} alt=\"icon\" />\n        {props.desc}\n      </Label>\n      <Table celled>\n        <Table.Body>\n          <Table.Row textAlign=\"center\">\n            <Table.Cell>Max Temperature</Table.Cell>\n            <Table.Cell>{props.maxTemp} ° C</Table.Cell>\n          </Table.Row>\n          <Table.Row textAlign=\"center\">\n            <Table.Cell>Min Temperature</Table.Cell>\n            <Table.Cell>{props.minTemp} ° C</Table.Cell>\n          </Table.Row>\n          <Table.Row textAlign=\"center\">\n            <Table.Cell>Humidity</Table.Cell>\n            <Table.Cell>{props.humidity} %</Table.Cell>\n          </Table.Row>\n          <Table.Row textAlign=\"center\">\n            <Table.Cell>Pressure</Table.Cell>\n            <Table.Cell>{props.pressure} hpa</Table.Cell>\n          </Table.Row>\n          <Table.Row textAlign=\"center\">\n            <Table.Cell>Wind Speed</Table.Cell>\n            <Table.Cell>{props.wind} meter/sec</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { Component } from \"react\";\nimport InputCity from \"./Components/InputCity\";\nimport Weather from \"./Components/Weather\";\nimport { Grid, Header, Message } from \"semantic-ui-react\";\n\nimport \"./App.css\";\n\nconst apiKey = \"b7b1efccbab35930028771afa7d67a08\";\nlet city = \"Shkoder\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      location: undefined,\n      country: undefined,\n      temp: undefined,\n      icon: undefined,\n      desc: undefined,\n      maxTemp: undefined,\n      minTemp: undefined,\n      humidity: undefined,\n      pressure: undefined,\n      wind: undefined,\n      flag: undefined,\n      cod: undefined\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=${apiKey}`\n    )\n      .then(response => response.json())\n      .then(weather => {\n        this.setState({\n          cod: weather.cod,\n          location: weather.name,\n          country: weather.sys.country,\n          temp: weather.main.temp.toFixed(),\n          icon: `http://openweathermap.org/img/w/${\n            weather.weather[0].icon\n          }.png`,\n          desc: weather.weather[0].description,\n          maxTemp: weather.main.temp_max.toFixed(),\n          minTemp: weather.main.temp_min.toFixed(),\n          humidity: weather.main.humidity,\n          pressure: weather.main.pressure,\n          wind: weather.wind.speed,\n          flag: weather.sys.country.toLowerCase()\n        });\n      });\n  }\n\n  handleChange = (e, { name, value }) => this.setState({ [name]: value });\n\n  showWeather = e => {\n    e.preventDefault();\n    city = e.target.city.value;\n    e.target.city.value = \"\";\n  };\n\n  componentDidUpdate() {\n    this.componentDidMount();\n\n    console.log(this.state.cod);\n  }\n\n  render() {\n    const {\n      location,\n      country,\n      temp,\n      icon,\n      desc,\n      maxTemp,\n      minTemp,\n      humidity,\n      pressure,\n      wind,\n      flag,\n      cod\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Grid textAlign=\"center\" verticalAlign=\"middle\">\n          <Grid.Column style={{ maxWidth: 650 }}>\n            <Header as=\"h1\" color=\"teal\" textAlign=\"center\">\n              Show Weather App\n            </Header>\n            <InputCity\n              showWeather={this.showWeather}\n              handleChange={this.handleChange}\n            />\n            <div className=\"weather\">\n              <Weather\n                location={location}\n                country={country}\n                temp={temp}\n                icon={icon}\n                desc={desc}\n                maxTemp={maxTemp}\n                minTemp={minTemp}\n                humidity={humidity}\n                pressure={pressure}\n                wind={wind}\n                flag={flag}\n                cod={cod}\n              />\n            </div>\n            <Message>\n              Build by <a href=\"http://github.com/eriuni\">ERIUNI</a>\n            </Message>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}